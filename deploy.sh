#!/bin/bash
set -e

# Carrega vari√°veis do .env (se dispon√≠vel)
if [ -f .env ]; then
  export $(grep -v '^#' .env | xargs)
else
  echo "‚ùå Arquivo .env n√£o encontrado. Crie um com base em .env.example"
  exit 1
fi

# Carrega vari√°veis do .env.production (se dispon√≠vel)
if [ -f .env.production ]; then
  export $(grep -v '^#' .env.production | xargs)
else
  echo "‚ö†Ô∏è Arquivo .env.production n√£o encontrado. Continuando com as vari√°veis do .env"
fi

# Verifica vari√°vel SERVICE_NAME
if [ -z "$SERVICE_NAME" ]; then
  echo "‚ùå Vari√°vel SERVICE_NAME n√£o definida no .env"
  exit 1
fi


# BUILD FRONT
echo "üîß Fazendo build do front-end..."
cd "$LOCAL_FRONT_DIR" || { echo "‚ùå Pasta do front n√£o encontrada"; exit 1; }

pnpm install
pnpm run build || { echo "‚ùå Build do front falhou"; exit 1; }

# SYNC FRONTEND
echo "üöÄ Subindo front-end buildado para o servidor..."
rsync -avz -e "ssh -p $SSH_PORT" --delete "$LOCAL_FRONT_BUILD_DIR/" "$SSH_USER@[$SSH_HOST]:$REMOTE_FRONT_PATH"


# SYNC BACKEND
echo "üì¶ Subindo back-end (excluindo .venv e .env)..."
rsync -avz -e "ssh -p $SSH_PORT" --delete --exclude='.venv' --exclude='.env' "$LOCAL_BACK_DIR/" "$SSH_USER@[$SSH_HOST]:$REMOTE_BACK_PATH"


# SERVER DEPLOY STEP 
echo "‚öôÔ∏è  Instalando depend√™ncias no servidor e reiniciando servi√ßo $SERVICE_NAME..."
ssh -t -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "
  SERVICE_NAME=$SERVICE_NAME
  cd $REMOTE_BACK_PATH &&
  python3 -m venv .venv &&
  source .venv/bin/activate &&
  pip install --upgrade pip &&
  if [ -f requirements.txt ]; then
    pip install -r requirements.txt
  else
    echo '‚ö†Ô∏è  requirements.txt n√£o encontrado'
  fi &&
  sudo systemctl restart \$SERVICE_NAME
"

echo "‚úÖ Deploy finalizado com sucesso."
